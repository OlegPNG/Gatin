// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: flashcards.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO flashcards (id, front, back)
VALUES (
    $1,
    $2,
    $3
)
RETURNING id, front, back
`

type CreateFlashcardParams struct {
	ID    uuid.NullUUID
	Front sql.NullString
	Back  sql.NullString
}

func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRowContext(ctx, createFlashcard, arg.ID, arg.Front, arg.Back)
	var i Flashcard
	err := row.Scan(&i.ID, &i.Front, &i.Back)
	return i, err
}

const getAllFlashcards = `-- name: GetAllFlashcards :many
SELECT id, front, back FROM flashcards
`

func (q *Queries) GetAllFlashcards(ctx context.Context) ([]Flashcard, error) {
	rows, err := q.db.QueryContext(ctx, getAllFlashcards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(&i.ID, &i.Front, &i.Back); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
