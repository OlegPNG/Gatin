// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: flashcards.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFlashcard = `-- name: CreateFlashcard :one
INSERT INTO flashcards (set_id, front, back)
VALUES (
    $1,
    $2,
    $3
)
RETURNING set_id, id, front, back
`

type CreateFlashcardParams struct {
	SetID uuid.UUID `json:"set_id"`
	Front string    `json:"front"`
	Back  string    `json:"back"`
}

func (q *Queries) CreateFlashcard(ctx context.Context, arg CreateFlashcardParams) (Flashcard, error) {
	row := q.db.QueryRow(ctx, createFlashcard, arg.SetID, arg.Front, arg.Back)
	var i Flashcard
	err := row.Scan(
		&i.SetID,
		&i.ID,
		&i.Front,
		&i.Back,
	)
	return i, err
}

type CreateFlashcardsParams struct {
	SetID uuid.UUID `json:"set_id"`
	Front string    `json:"front"`
	Back  string    `json:"back"`
}

const deleteFlashcards = `-- name: DeleteFlashcards :exec
DELETE FROM flashcards WHERE (set_id = $1 AND id =$2)
`

type DeleteFlashcardsParams struct {
	SetID uuid.UUID `json:"set_id"`
	ID    int32     `json:"id"`
}

func (q *Queries) DeleteFlashcards(ctx context.Context, arg DeleteFlashcardsParams) error {
	_, err := q.db.Exec(ctx, deleteFlashcards, arg.SetID, arg.ID)
	return err
}

const editFlashcards = `-- name: EditFlashcards :exec
UPDATE flashcards SET front = $3, back = $4 WHERE (set_id = $1 AND id =$2)
`

type EditFlashcardsParams struct {
	SetID uuid.UUID `json:"set_id"`
	ID    int32     `json:"id"`
	Front string    `json:"front"`
	Back  string    `json:"back"`
}

func (q *Queries) EditFlashcards(ctx context.Context, arg EditFlashcardsParams) error {
	_, err := q.db.Exec(ctx, editFlashcards,
		arg.SetID,
		arg.ID,
		arg.Front,
		arg.Back,
	)
	return err
}

const getAllFlashcards = `-- name: GetAllFlashcards :many
SELECT set_id, id, front, back FROM flashcards
`

func (q *Queries) GetAllFlashcards(ctx context.Context) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getAllFlashcards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.SetID,
			&i.ID,
			&i.Front,
			&i.Back,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFlashcardsBySetId = `-- name: GetFlashcardsBySetId :many
SELECT set_id, id, front, back FROM flashcards
WHERE (set_id = $1)
`

func (q *Queries) GetFlashcardsBySetId(ctx context.Context, setID uuid.UUID) ([]Flashcard, error) {
	rows, err := q.db.Query(ctx, getFlashcardsBySetId, setID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flashcard
	for rows.Next() {
		var i Flashcard
		if err := rows.Scan(
			&i.SetID,
			&i.ID,
			&i.Front,
			&i.Back,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
