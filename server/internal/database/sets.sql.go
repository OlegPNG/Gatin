// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sets.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSet = `-- name: CreateSet :one
INSERT INTO sets (id, title, description, email)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, title, description, email
`

type CreateSetParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Email       string    `json:"email"`
}

func (q *Queries) CreateSet(ctx context.Context, arg CreateSetParams) (Set, error) {
	row := q.db.QueryRow(ctx, createSet,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Email,
	)
	var i Set
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Email,
	)
	return i, err
}

const deleteSet = `-- name: DeleteSet :exec
DELETE FROM sets WHERE (id = $1)
`

func (q *Queries) DeleteSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSet, id)
	return err
}

const editSet = `-- name: EditSet :exec
UPDATE sets SET title = $2, description = $3 WHERE (id = $1)
`

type EditSetParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
}

func (q *Queries) EditSet(ctx context.Context, arg EditSetParams) error {
	_, err := q.db.Exec(ctx, editSet, arg.ID, arg.Title, arg.Description)
	return err
}

const getSetOwner = `-- name: GetSetOwner :one
SELECT email FROM sets
WHERE (id = $1)
`

func (q *Queries) GetSetOwner(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getSetOwner, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getSetsByAccount = `-- name: GetSetsByAccount :many
SELECT id, title, description, email FROM sets
WHERE (email = $1)
`

func (q *Queries) GetSetsByAccount(ctx context.Context, email string) ([]Set, error) {
	rows, err := q.db.Query(ctx, getSetsByAccount, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Set
	for rows.Next() {
		var i Set
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
